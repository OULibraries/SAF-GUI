/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.safpackager;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.apache.commons.io.FilenameUtils;
import org.safpackager.Cs.CgPackage;
import org.safpackager.Cs.CsPackage;
import org.safpackager.Cs.CsValidation;
import org.safpackager.Cs.CtPackage;
import org.safpackager.Cs.CtValidation;
import org.safpackager.Utils.IdType;

/**
 *
 * @author john
 */
public class Builder extends javax.swing.JFrame {

    /**
     * Creates new form Builder
     */
    public Builder() {
        super("OU - Libraries");
        initComponents();
//        com.apple.eawt.Application.getApplication().setDockIconImage(new ImageIcon(getClass().getResource("/logo.png")).getImage());
        tabbedPane.remove(5);
        tabbedPane.remove(4);
        // tabbedPane.remove(1);
    }

    private CsValidation validation = null;
    private String abstractPath = null;
    private String pathToSave = null;
    private String csPathToZipcode = null;
    private String csPathToCsv = null;
    private String csPathToPhotos = null;
    private String csPathToSave = null;
    private String csPathToCollection = null;
    private String ctPathToCsv = null;
    private String ctPathToSave = null;
    private String ctPathToCollection = null;
    private CtValidation ctValidation = null;
    private String cgPathToCollection = null;
    private String cgPathToSave = null;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tabbedPane = new javax.swing.JTabbedPane();
        panHome = new javax.swing.JPanel();
        lblHomeLogo = new javax.swing.JLabel();
        lblHomeApplication = new javax.swing.JLabel();
        panSAF = new javax.swing.JPanel();
        btnSAFOpenCSV = new javax.swing.JButton();
        lblSAFCSVPath = new javax.swing.JLabel();
        btnSAFGenerateSAF = new javax.swing.JButton();
        lblSAFAlert = new javax.swing.JLabel();
        btnSAFSelectPath = new javax.swing.JButton();
        lblSAFSelectedSavePath = new javax.swing.JLabel();
        lblSAFOutputDir = new javax.swing.JLabel();
        panCs = new javax.swing.JPanel();
        btnCsOpenCsv = new javax.swing.JButton();
        btnCsOpenSavePath = new javax.swing.JButton();
        lblCsCsvPath = new javax.swing.JLabel();
        lblCsSavePath = new javax.swing.JLabel();
        btnCsOpenCollection = new javax.swing.JButton();
        lblCsCollectionPath = new javax.swing.JLabel();
        btnCsGenerateSaf = new javax.swing.JButton();
        btnCsOpenZipcode = new javax.swing.JButton();
        btnCsOpenPhotos = new javax.swing.JButton();
        lblCsPhotoPath = new javax.swing.JLabel();
        lblCsAlert = new javax.swing.JLabel();
        lblCsOpenZipcodePath = new javax.swing.JLabel();
        panCsT = new javax.swing.JPanel();
        btnCtOpenCollectionCsv = new javax.swing.JButton();
        lblCtCollectionPath = new javax.swing.JLabel();
        btnCtOpenCsv = new javax.swing.JButton();
        lblCtCsvPath = new javax.swing.JLabel();
        btnCtGenerateTax = new javax.swing.JButton();
        lblCtAlert = new javax.swing.JLabel();
        btnCtOpenSavePath = new javax.swing.JButton();
        lblCtSavePath = new javax.swing.JLabel();
        panCsG = new javax.swing.JPanel();
        btnCgOpenCollectionCsv = new javax.swing.JButton();
        btnCgOpenSavePath = new javax.swing.JButton();
        lblCgCollectionPath = new javax.swing.JLabel();
        btnCgGenerateGeo = new javax.swing.JButton();
        lblCgSavePath = new javax.swing.JLabel();
        lblCgAlert = new javax.swing.JLabel();
        panHelp = new javax.swing.JPanel();
        lblHelpPrepareData = new javax.swing.JLabel();
        lblHelpGenerateSAF = new javax.swing.JLabel();
        lblHelpSampleCSV = new javax.swing.JLabel();
        lblHelpCSVTitle = new javax.swing.JLabel();
        panCsHelp = new javax.swing.JPanel();
        lblHelpPrepareData1 = new javax.swing.JLabel();
        lblHelpPrepareData3 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(120, 120, 570, 300));
        setLocation(new java.awt.Point(30, 23));

        tabbedPane.setBackground(new java.awt.Color(255, 255, 255));

        panHome.setBackground(new java.awt.Color(255, 255, 255));

        lblHomeLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N

        lblHomeApplication.setFont(new java.awt.Font("Lucida Grande", 1, 72)); // NOI18N
        lblHomeApplication.setText("SAFBuilder");

        javax.swing.GroupLayout panHomeLayout = new javax.swing.GroupLayout(panHome);
        panHome.setLayout(panHomeLayout);
        panHomeLayout.setHorizontalGroup(
            panHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panHomeLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(lblHomeLogo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHomeApplication, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panHomeLayout.setVerticalGroup(
            panHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panHomeLayout.createSequentialGroup()
                .addGroup(panHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panHomeLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(lblHomeLogo))
                    .addGroup(panHomeLayout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(lblHomeApplication)))
                .addContainerGap(185, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Home", panHome);

        panSAF.setBackground(new java.awt.Color(255, 255, 255));

        btnSAFOpenCSV.setText("Open a csv file");
        btnSAFOpenCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSAFOpenCSVActionPerformed(evt);
            }
        });

        btnSAFGenerateSAF.setText("Generate SAF");
        btnSAFGenerateSAF.setVisible(false);
        btnSAFGenerateSAF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSAFGenerateSAFActionPerformed(evt);
            }
        });

        btnSAFSelectPath.setText("Select path to save");
        btnSAFSelectPath.setVisible(false);
        btnSAFSelectPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSAFSelectPathActionPerformed(evt);
            }
        });

        lblSAFSelectedSavePath.setOpaque(true);

        javax.swing.GroupLayout panSAFLayout = new javax.swing.GroupLayout(panSAF);
        panSAF.setLayout(panSAFLayout);
        panSAFLayout.setHorizontalGroup(
            panSAFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panSAFLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(panSAFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panSAFLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblSAFOutputDir))
                    .addGroup(panSAFLayout.createSequentialGroup()
                        .addGroup(panSAFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSAFSelectPath)
                            .addComponent(lblSAFAlert)
                            .addComponent(btnSAFGenerateSAF)
                            .addComponent(btnSAFOpenCSV))
                        .addGap(18, 18, 18)
                        .addGroup(panSAFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSAFCSVPath, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSAFSelectedSavePath, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        panSAFLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSAFGenerateSAF, btnSAFOpenCSV, btnSAFSelectPath});

        panSAFLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblSAFCSVPath, lblSAFSelectedSavePath});

        panSAFLayout.setVerticalGroup(
            panSAFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panSAFLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(panSAFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSAFOpenCSV)
                    .addComponent(lblSAFCSVPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSAFAlert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panSAFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSAFSelectPath)
                    .addComponent(lblSAFSelectedSavePath))
                .addGap(10, 10, 10)
                .addComponent(btnSAFGenerateSAF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSAFOutputDir)
                .addContainerGap(227, Short.MAX_VALUE))
        );

        tabbedPane.addTab("SAF", panSAF);

        panCs.setBackground(new java.awt.Color(255, 255, 255));

        btnCsOpenCsv.setText("Open new data csv");
        btnCsOpenCsv.setVisible(false);
        btnCsOpenCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCsOpenCsvActionPerformed(evt);
            }
        });

        btnCsOpenSavePath.setText("Select path to save");
        btnCsOpenSavePath.setVisible(false);
        btnCsOpenSavePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCsOpenSavePathActionPerformed(evt);
            }
        });

        btnCsOpenCollection.setText("Open collection csv");
        btnCsOpenCollection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCsOpenCollectionActionPerformed(evt);
            }
        });

        btnCsGenerateSaf.setText("Generate SAF");
        btnCsGenerateSaf.setVisible(false);
        btnCsGenerateSaf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCsGenerateSafActionPerformed(evt);
            }
        });

        btnCsOpenZipcode.setText("Open Zipcode csv");
        btnCsOpenZipcode.setVisible(false);
        btnCsOpenZipcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCsOpenZipcodeActionPerformed(evt);
            }
        });

        btnCsOpenPhotos.setText("Open photo directory");
        btnCsOpenPhotos.setVisible(false);
        btnCsOpenPhotos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCsOpenPhotosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panCsLayout = new javax.swing.GroupLayout(panCs);
        panCs.setLayout(panCsLayout);
        panCsLayout.setHorizontalGroup(
            panCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCsLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCsGenerateSaf)
                    .addGroup(panCsLayout.createSequentialGroup()
                        .addGroup(panCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCsOpenZipcode)
                            .addComponent(btnCsOpenCollection)
                            .addComponent(btnCsOpenPhotos)
                            .addComponent(btnCsOpenCsv))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCsCollectionPath)
                            .addComponent(lblCsPhotoPath)
                            .addComponent(lblCsCsvPath)
                            .addComponent(lblCsOpenZipcodePath)))
                    .addGroup(panCsLayout.createSequentialGroup()
                        .addComponent(btnCsOpenSavePath)
                        .addGap(18, 18, 18)
                        .addComponent(lblCsSavePath, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panCsLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(lblCsAlert, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        panCsLayout.setVerticalGroup(
            panCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCsLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(panCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCsLayout.createSequentialGroup()
                        .addComponent(btnCsOpenCollection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCsOpenZipcode)
                            .addComponent(lblCsOpenZipcodePath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCsOpenCsv)
                            .addComponent(lblCsCsvPath))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCsOpenPhotos)
                            .addComponent(lblCsPhotoPath)))
                    .addComponent(lblCsCollectionPath, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panCsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCsOpenSavePath)
                    .addComponent(lblCsSavePath))
                .addGap(7, 7, 7)
                .addComponent(btnCsGenerateSaf, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCsAlert)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        tabbedPane.addTab("CS", panCs);

        panCsT.setBackground(new java.awt.Color(255, 255, 255));

        btnCtOpenCollectionCsv.setText("Open tax collection csv");
        btnCtOpenCollectionCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCtOpenCollectionCsvActionPerformed(evt);
            }
        });

        btnCtOpenCsv.setText("Open tax csv");
        btnCtOpenCsv.setVisible(false);
        btnCtOpenCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCtOpenCsvActionPerformed(evt);
            }
        });

        btnCtGenerateTax.setText("Generate tax");
        btnCtGenerateTax.setVisible(false);
        btnCtGenerateTax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCtGenerateTaxActionPerformed(evt);
            }
        });

        btnCtOpenSavePath.setText("Select path to save");
        btnCtOpenSavePath.setVisible(false);
        btnCtOpenSavePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCtOpenSavePathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panCsTLayout = new javax.swing.GroupLayout(panCsT);
        panCsT.setLayout(panCsTLayout);
        panCsTLayout.setHorizontalGroup(
            panCsTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCsTLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCsTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCsTLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblCtAlert))
                    .addGroup(panCsTLayout.createSequentialGroup()
                        .addComponent(btnCtOpenCollectionCsv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCtCollectionPath))
                    .addGroup(panCsTLayout.createSequentialGroup()
                        .addComponent(btnCtOpenCsv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCtCsvPath))
                    .addComponent(btnCtGenerateTax)
                    .addGroup(panCsTLayout.createSequentialGroup()
                        .addComponent(btnCtOpenSavePath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCtSavePath)))
                .addContainerGap(394, Short.MAX_VALUE))
        );
        panCsTLayout.setVerticalGroup(
            panCsTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCsTLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(panCsTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCtOpenCollectionCsv)
                    .addComponent(lblCtCollectionPath))
                .addGap(8, 8, 8)
                .addGroup(panCsTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCtOpenCsv)
                    .addComponent(lblCtCsvPath))
                .addGap(8, 8, 8)
                .addGroup(panCsTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCtOpenSavePath)
                    .addComponent(lblCtSavePath))
                .addGap(8, 8, 8)
                .addComponent(btnCtGenerateTax)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCtAlert)
                .addContainerGap(196, Short.MAX_VALUE))
        );

        tabbedPane.addTab("CS Tax", panCsT);

        panCsG.setBackground(new java.awt.Color(255, 255, 255));

        btnCgOpenCollectionCsv.setText("Open collection csv");
        btnCgOpenCollectionCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCgOpenCollectionCsvActionPerformed(evt);
            }
        });

        btnCgOpenSavePath.setText("Select path to save");
        btnCgOpenSavePath.setVisible(false);
        btnCgOpenSavePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCgOpenSavePathActionPerformed(evt);
            }
        });

        btnCgGenerateGeo.setText("Generate geo");
        btnCgGenerateGeo.setVisible(false);
        btnCgGenerateGeo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCgGenerateGeoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panCsGLayout = new javax.swing.GroupLayout(panCsG);
        panCsG.setLayout(panCsGLayout);
        panCsGLayout.setHorizontalGroup(
            panCsGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCsGLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panCsGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panCsGLayout.createSequentialGroup()
                        .addComponent(btnCgOpenCollectionCsv)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCgCollectionPath))
                    .addGroup(panCsGLayout.createSequentialGroup()
                        .addComponent(btnCgOpenSavePath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCgSavePath))
                    .addComponent(lblCgAlert)
                    .addComponent(btnCgGenerateGeo))
                .addContainerGap(418, Short.MAX_VALUE))
        );
        panCsGLayout.setVerticalGroup(
            panCsGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCsGLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panCsGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCgOpenCollectionCsv)
                    .addComponent(lblCgCollectionPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panCsGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCgOpenSavePath)
                    .addComponent(lblCgSavePath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCgGenerateGeo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCgAlert)
                .addContainerGap(245, Short.MAX_VALUE))
        );

        tabbedPane.addTab("CS Geo", panCsG);

        panHelp.setBackground(new java.awt.Color(255, 255, 255));

        lblHelpPrepareData.setText("<html> <b>How to prepare data:</b><br/> 1) A csv metadata file (See sample below)<br/> 2) PDF or other files must be in the same directory with the csv<br/> 3) The header of column for files must be named as \"filename\"<br/> 4) Use || to separate file names if an item has multiple files<br/> 5) Dublin core metadata starts with \"dc\", custom non dublin core metadata has formats like \"ou.group\" or \"ou.group.faculty\" <br/> </html>");

        lblHelpGenerateSAF.setText("<html> <b>How to generate SAF package:</b><br/> 1) In the SAF tab, open the csv containing your metadata<br/> 2) Press Generate SAF button which appears if the opened file is a csv<br/> 3) Verify the location of the SAF package </html>");

        lblHelpSampleCSV.setIcon(new javax.swing.ImageIcon(getClass().getResource("/headers.png"))); // NOI18N

        lblHelpCSVTitle.setText("sample csv file: ");

        javax.swing.GroupLayout panHelpLayout = new javax.swing.GroupLayout(panHelp);
        panHelp.setLayout(panHelpLayout);
        panHelpLayout.setHorizontalGroup(
            panHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panHelpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panHelpLayout.createSequentialGroup()
                        .addComponent(lblHelpPrepareData, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(15, Short.MAX_VALUE))
                    .addGroup(panHelpLayout.createSequentialGroup()
                        .addGroup(panHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHelpCSVTitle)
                            .addComponent(lblHelpGenerateSAF, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblHelpSampleCSV))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panHelpLayout.setVerticalGroup(
            panHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panHelpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHelpPrepareData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHelpCSVTitle)
                .addGap(3, 3, 3)
                .addComponent(lblHelpSampleCSV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHelpGenerateSAF)
                .addContainerGap())
        );

        tabbedPane.addTab("Help", panHelp);

        panCsHelp.setBackground(new java.awt.Color(255, 255, 255));

        lblHelpPrepareData1.setText("<html> <b>How to prepare CS Tax data:</b><br/> 1) Export latest metadata file from CS collection<br/> 2) Convert new taxonomy metadata file to csv<br/> </html>");

        lblHelpPrepareData3.setText("<html> <b>How to prepare CS data:</b><br/> 1) Export metadata file from CS collection<br/> 2) <a href=''>Download</a> zipcode file and add new entries if need<br/> 3) Convert new CS data excel file to csv<br/> </html>");
        lblHelpPrepareData3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblHelpPrepareData3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHelpPrepareData3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panCsHelpLayout = new javax.swing.GroupLayout(panCsHelp);
        panCsHelp.setLayout(panCsHelpLayout);
        panCsHelpLayout.setHorizontalGroup(
            panCsHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCsHelpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHelpPrepareData1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                .addGap(15, 15, 15))
            .addGroup(panCsHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panCsHelpLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblHelpPrepareData3, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                    .addGap(8, 8, 8)))
        );
        panCsHelpLayout.setVerticalGroup(
            panCsHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panCsHelpLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(lblHelpPrepareData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(241, Short.MAX_VALUE))
            .addGroup(panCsHelpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panCsHelpLayout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(lblHelpPrepareData3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(292, Short.MAX_VALUE)))
        );

        tabbedPane.addTab("Help", panCsHelp);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSAFGenerateSAFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSAFGenerateSAFActionPerformed
        if (abstractPath != null) {
            SAFPackage safPackageInstance = new SAFPackage();
            pathToSave = lblSAFSelectedSavePath.getText();
            try {
                safPackageInstance.processMetaPack(abstractPath, pathToSave, true);
                lblSAFOutputDir.setText(safPackageInstance.getOutputString());
            } catch (IOException ex) {
                Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSAFGenerateSAFActionPerformed

    private void btnSAFOpenCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSAFOpenCSVActionPerformed

        btnSAFGenerateSAF.setVisible(false);
        btnSAFSelectPath.setVisible(false);
        lblSAFSelectedSavePath.setVisible(false);
        lblSAFOutputDir.setText("");

        JFileChooser fc = new JFileChooser();

        String fileName;
        int r = fc.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            fileName = file.getName();
            abstractPath = fc.getSelectedFile().getAbsolutePath();
            lblSAFCSVPath.setText(abstractPath);

            if ("csv".equals(getExtensionByApacheCommonLib(fileName))) {
                lblSAFAlert.setText("");
                btnSAFSelectPath.setVisible(true);
                lblSAFSelectedSavePath.setVisible(true);
                lblSAFSelectedSavePath.setText(fc.getSelectedFile().getParent());
                btnSAFGenerateSAF.setVisible(true);
            } else {
                lblSAFAlert.setText("Please select a csv file");
            }
        }
    }//GEN-LAST:event_btnSAFOpenCSVActionPerformed

    private void btnSAFSelectPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSAFSelectPathActionPerformed
        JFileChooser chooser = new JFileChooser();
        String choosertitle = "Select a Directory";
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            pathToSave = chooser.getSelectedFile().toString();
            lblSAFSelectedSavePath.setText(pathToSave);
        }
    }//GEN-LAST:event_btnSAFSelectPathActionPerformed

    private void btnCsOpenCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCsOpenCsvActionPerformed
        btnCsGenerateSaf.setVisible(false);
        lblCsAlert.setText("");
        lblCsCsvPath.setText("");

        JFileChooser fc = new JFileChooser();

        String fileName;
        int r = fc.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            fileName = file.getName();
            csPathToCsv = fc.getSelectedFile().getAbsolutePath();

            if ("csv".equals(getExtensionByApacheCommonLib(fileName))) {
                try {
                    validation = CsValidation.getInstance();
                    Map<String, ArrayList> errors = validation.validateCSV(csPathToCsv);
                    if(!errors.isEmpty()) {
                        lblCsAlert.setText(Utils.getCsErrors(errors));
                    } else {
                        btnCsOpenPhotos.setVisible(true);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
                }
                lblCsCsvPath.setText(csPathToCsv);
                setCsSAFButtonStatus();
            } else {
                lblCsAlert.setText("Please select a csv file");
            }
        }
    }//GEN-LAST:event_btnCsOpenCsvActionPerformed

    private void btnCsOpenSavePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCsOpenSavePathActionPerformed
        btnCsGenerateSaf.setVisible(false);
        lblCsAlert.setText("");
        lblCsSavePath.setText("");
        
        JFileChooser chooser = new JFileChooser();
        String choosertitle = "Select a Directory";
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            csPathToSave = chooser.getSelectedFile().toString();
            lblCsSavePath.setText(csPathToSave);
            setCsSAFButtonStatus();
        }        
    }//GEN-LAST:event_btnCsOpenSavePathActionPerformed

    private void btnCsOpenCollectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCsOpenCollectionActionPerformed
        btnCsGenerateSaf.setVisible(false);
        lblCsAlert.setText("");
        lblCsCollectionPath.setText("");

        JFileChooser fc = new JFileChooser();

        String fileName;
        int r = fc.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            fileName = file.getName();
            csPathToCollection = fc.getSelectedFile().getAbsolutePath();

            if ("csv".equals(getExtensionByApacheCommonLib(fileName))) {
                try {
                    boolean isValidated = Utils.validateCollectionCsv(csPathToCollection);
                    if(!isValidated) {
                        lblCsAlert.setText(Utils.getCollectionErrors(isValidated));
                    } else {
                        btnCsOpenZipcode.setVisible(true);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
                }
                lblCsCollectionPath.setText(csPathToCollection);
                setCsSAFButtonStatus();
            } else {
                lblCsAlert.setText("Please select a csv file");
            }
        }
    }//GEN-LAST:event_btnCsOpenCollectionActionPerformed

    private void btnCsOpenPhotosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCsOpenPhotosActionPerformed
        btnCsGenerateSaf.setVisible(false);
        lblCsAlert.setText("");
        lblCsPhotoPath.setText("");

        JFileChooser chooser = new JFileChooser();
        String choosertitle = "Select a Directory";
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            csPathToPhotos = chooser.getSelectedFile().toString();
            validation = CsValidation.getInstance();
            Map<String, ArrayList> errors = validation.validatePhotoNameFormat(csPathToPhotos);
            if(!validation.isPhotoValidated(errors)) {
                lblCsAlert.setText(Utils.getPhotoErrors(errors));
            } else {
                lblCsPhotoPath.setText(csPathToPhotos);
                btnCsOpenSavePath.setVisible(true);
                lblCsSavePath.setVisible(true);
                setCsSAFButtonStatus();
            }
        }
    }//GEN-LAST:event_btnCsOpenPhotosActionPerformed

    private void btnCsGenerateSafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCsGenerateSafActionPerformed
        batchSetCSButtonsEnable(false);
        lblCsAlert.setText("");
        CsPackage cSPackage = new CsPackage(csPathToCsv, csPathToPhotos, csPathToSave, csPathToCollection);        
        String e;
        try {
            cSPackage.processMetaPack();
            batchSetCSButtonsEnable(true);
        } catch (IOException ex) {
            e = Utils.getCsErrorInfo(cSPackage.getCsInfo());
            lblCsAlert.setText(e);
        }
        e = Utils.getCsErrorInfo(cSPackage.getCsInfo());
        lblCsAlert.setText(e);
    }//GEN-LAST:event_btnCsGenerateSafActionPerformed

    private void btnCtOpenCollectionCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCtOpenCollectionCsvActionPerformed
        btnCtGenerateTax.setVisible(false);
        lblCtAlert.setText("");
        lblCtCollectionPath.setText("");
        
        JFileChooser fc = new JFileChooser();

        String fileName;
        int r = fc.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            fileName = file.getName();
            ctPathToCollection = fc.getSelectedFile().getAbsolutePath();

            if ("csv".equals(getExtensionByApacheCommonLib(fileName))) {
                try {
                    boolean isValidated = Utils.validateCollectionCsv(ctPathToCollection);
                    if(!isValidated) {
                        lblCtAlert.setText(Utils.getCollectionErrors(isValidated));
                    } else {
                        btnCtOpenCsv.setVisible(true);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
                }
                lblCtCollectionPath.setText(ctPathToCollection);
            } else {
                lblCtAlert.setText("Please select a csv file");
            }
            setCtSAFButtonStatus();
        }        
    }//GEN-LAST:event_btnCtOpenCollectionCsvActionPerformed

    private void btnCtOpenCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCtOpenCsvActionPerformed
        btnCtGenerateTax.setVisible(false);
        lblCtAlert.setText("");
        lblCtCsvPath.setText("");

        JFileChooser fc = new JFileChooser();

        String fileName;
        int r = fc.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            fileName = file.getName();
            ctPathToCsv = fc.getSelectedFile().getAbsolutePath();

            if ("csv".equals(getExtensionByApacheCommonLib(fileName))) {
                try {
                    // ctValidation = new CtValidation(ctPathToCollection, IdType.INTERNALID);
                    ctValidation = new CtValidation(ctPathToCollection, IdType.SAMPLEID);
                    if(!ctValidation.validateTaxCsvFormat(ctPathToCsv, IdType.SAMPLEID)) {
                        lblCtAlert.setText(ctValidation.getTaxCsvFormatErrors(false));
                    } else {
                        ArrayList<String> errors = ctValidation.validateTaxCsvContent(ctPathToCsv);
                        if(errors.size() > 0) {
                            lblCtAlert.setText(Utils.getCtErrors(errors));
                        } else {
                            setCtSAFButtonStatus();
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
                }
                lblCtCsvPath.setText(ctPathToCsv);
                btnCtOpenSavePath.setVisible(true);
                setCtSAFButtonStatus();
            } else {
                lblCtAlert.setText("Please select a csv file");
            }
        }
    }//GEN-LAST:event_btnCtOpenCsvActionPerformed

    private void btnCtOpenSavePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCtOpenSavePathActionPerformed
        btnCtGenerateTax.setVisible(false);
        lblCtAlert.setText("");
        lblCtSavePath.setText("");
        
        JFileChooser chooser = new JFileChooser();
        String choosertitle = "Select a Directory";
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            ctPathToSave = chooser.getSelectedFile().toString();
            lblCtSavePath.setText(ctPathToSave);
            setCtSAFButtonStatus();
        }        

    }//GEN-LAST:event_btnCtOpenSavePathActionPerformed

    private void btnCtGenerateTaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCtGenerateTaxActionPerformed
        batchSetCTButtonsEnable(false);
        lblCtAlert.setText("");
        CtPackage ctPackage = new CtPackage(ctPathToCollection, ctPathToCsv, ctPathToSave);
        String e;
        try {
            ctPackage.processMetaPack();
            batchSetCTButtonsEnable(true);
        } catch (IOException ex) {
            e = Utils.getCsErrorInfo(ctPackage.getCsInfo());
            lblCtAlert.setText(e);
        }
        e = Utils.getCsErrorInfo(ctPackage.getCsInfo());
        lblCtAlert.setText(e);
    }//GEN-LAST:event_btnCtGenerateTaxActionPerformed

    private void btnCgOpenCollectionCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCgOpenCollectionCsvActionPerformed

        lblCgAlert.setText("");
        lblCgCollectionPath.setText("");
        
        JFileChooser fc = new JFileChooser();

        String fileName;
        int r = fc.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            fileName = file.getName();
            cgPathToCollection = fc.getSelectedFile().getAbsolutePath();

            if ("csv".equals(getExtensionByApacheCommonLib(fileName))) {
                btnCgOpenSavePath.setVisible(true);
                lblCgCollectionPath.setText(cgPathToCollection);
            } else {
                lblCgAlert.setText("Please select a csv file");
            }
        }
    }//GEN-LAST:event_btnCgOpenCollectionCsvActionPerformed

    private void btnCgOpenSavePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCgOpenSavePathActionPerformed

        lblCgAlert.setText("");
        lblCgSavePath.setText("");
        
        JFileChooser chooser = new JFileChooser();
        String choosertitle = "Select a Directory";
        chooser.setDialogTitle(choosertitle);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            cgPathToSave = chooser.getSelectedFile().toString();
            lblCgSavePath.setText(cgPathToSave);
            btnCgGenerateGeo.setVisible(true);
        }
    }//GEN-LAST:event_btnCgOpenSavePathActionPerformed

    private void btnCgGenerateGeoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCgGenerateGeoActionPerformed
        try {
            CgPackage cgPackage = new CgPackage(cgPathToCollection, cgPathToSave);
            cgPackage.writeGeoJs();
            cgPackage.writeGeoJson();
            lblCgAlert.setText("points.js and points.json were saved in " + cgPathToSave);
        } catch (IOException ex) {
            Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCgGenerateGeoActionPerformed

    private void btnCsOpenZipcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCsOpenZipcodeActionPerformed
        btnCsGenerateSaf.setVisible(false);
        lblCsAlert.setText("");
        lblCsOpenZipcodePath.setText("");
        lblCsCsvPath.setText("");

        JFileChooser fc = new JFileChooser();

        String fileName;
        int r = fc.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            fileName = file.getName();
            csPathToZipcode = fc.getSelectedFile().getAbsolutePath();

            if ("csv".equals(getExtensionByApacheCommonLib(fileName))) {
                lblCsOpenZipcodePath.setText(csPathToZipcode);
                validation = CsValidation.getInstance();
                try {
                    boolean isValidated = Utils.validateZipcodeCsv(csPathToZipcode);
                    if(!isValidated) {
                        lblCsAlert.setText(Utils.getZipcodeErrors(isValidated));
                    } else {
                        btnCsOpenCsv.setVisible(true);
                        validation.validateZipcode(csPathToZipcode);
                        setCsSAFButtonStatus();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Builder.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                lblCsAlert.setText("Please select a csv file");
            }
        }
    }//GEN-LAST:event_btnCsOpenZipcodeActionPerformed

    private void lblHelpPrepareData3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHelpPrepareData3MouseClicked
        try {

            Desktop.getDesktop().browse(new URI("http://52.91.38.132:8080/files/zipcode.csv"));

        } catch (IOException e1) {
            e1.printStackTrace();
        } catch (URISyntaxException e2) {
            e2.printStackTrace();
        }
    }//GEN-LAST:event_lblHelpPrepareData3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Builder.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Builder.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Builder.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Builder.class
.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Builder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCgGenerateGeo;
    private javax.swing.JButton btnCgOpenCollectionCsv;
    private javax.swing.JButton btnCgOpenSavePath;
    private javax.swing.JButton btnCsGenerateSaf;
    private javax.swing.JButton btnCsOpenCollection;
    private javax.swing.JButton btnCsOpenCsv;
    private javax.swing.JButton btnCsOpenPhotos;
    private javax.swing.JButton btnCsOpenSavePath;
    private javax.swing.JButton btnCsOpenZipcode;
    private javax.swing.JButton btnCtGenerateTax;
    private javax.swing.JButton btnCtOpenCollectionCsv;
    private javax.swing.JButton btnCtOpenCsv;
    private javax.swing.JButton btnCtOpenSavePath;
    private javax.swing.JButton btnSAFGenerateSAF;
    private javax.swing.JButton btnSAFOpenCSV;
    private javax.swing.JButton btnSAFSelectPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblCgAlert;
    private javax.swing.JLabel lblCgCollectionPath;
    private javax.swing.JLabel lblCgSavePath;
    private javax.swing.JLabel lblCsAlert;
    private javax.swing.JLabel lblCsCollectionPath;
    private javax.swing.JLabel lblCsCsvPath;
    private javax.swing.JLabel lblCsOpenZipcodePath;
    private javax.swing.JLabel lblCsPhotoPath;
    private javax.swing.JLabel lblCsSavePath;
    private javax.swing.JLabel lblCtAlert;
    private javax.swing.JLabel lblCtCollectionPath;
    private javax.swing.JLabel lblCtCsvPath;
    private javax.swing.JLabel lblCtSavePath;
    private javax.swing.JLabel lblHelpCSVTitle;
    private javax.swing.JLabel lblHelpGenerateSAF;
    private javax.swing.JLabel lblHelpPrepareData;
    private javax.swing.JLabel lblHelpPrepareData1;
    private javax.swing.JLabel lblHelpPrepareData3;
    private javax.swing.JLabel lblHelpSampleCSV;
    private javax.swing.JLabel lblHomeApplication;
    private javax.swing.JLabel lblHomeLogo;
    private javax.swing.JLabel lblSAFAlert;
    private javax.swing.JLabel lblSAFCSVPath;
    private javax.swing.JLabel lblSAFOutputDir;
    private javax.swing.JLabel lblSAFSelectedSavePath;
    private javax.swing.JPanel panCs;
    private javax.swing.JPanel panCsG;
    private javax.swing.JPanel panCsHelp;
    private javax.swing.JPanel panCsT;
    private javax.swing.JPanel panHelp;
    private javax.swing.JPanel panHome;
    private javax.swing.JPanel panSAF;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    private String getExtensionByApacheCommonLib(String filename) {
        return FilenameUtils.getExtension(filename);
    }

    private void setCsSAFButtonStatus() {
        // 5 buttons visible; 5 labels not empty; alert is empty
        if(btnCsOpenCollection.isVisible() && btnCsOpenCsv.isVisible() && btnCsOpenPhotos.isVisible()
                && btnCsOpenSavePath.isVisible() && btnCsOpenZipcode.isVisible()) {
            if(!lblCsCollectionPath.getText().isEmpty() && !lblCsCsvPath.getText().isEmpty()
                    && !lblCsOpenZipcodePath.getText().isEmpty() && !lblCsPhotoPath.getText().isEmpty()
                    && !lblCsSavePath.getText().isEmpty() && lblCsAlert.getText().isEmpty()) {
                btnCsGenerateSaf.setVisible(true);
            }
        }
    }

    private void setCtSAFButtonStatus() {
        // 3 buttons visible; 3 labels not empty; alert is empty
        if(btnCtOpenCollectionCsv.isVisible() && btnCtOpenCsv.isVisible() && btnCtOpenSavePath.isVisible()) {
            if(!lblCtCollectionPath.getText().isEmpty() && !lblCtCsvPath.getText().isEmpty()
                    && !lblCtSavePath.getText().isEmpty() && lblCtAlert.getText().isEmpty()) {
                btnCtGenerateTax.setVisible(true);
            }
        }
    }

    private void batchSetCSButtonsEnable(boolean enable) {
        if(enable) {
            btnCsGenerateSaf.setEnabled(true);
            btnCsOpenCollection.setEnabled(true);
            btnCsOpenZipcode.setEnabled(true);
            btnCsOpenCsv.setEnabled(true);
            btnCsOpenPhotos.setEnabled(true);
            btnCsOpenSavePath.setEnabled(true);
        } else {
            btnCsGenerateSaf.setEnabled(false);
            btnCsOpenCollection.setEnabled(false);
            btnCsOpenZipcode.setEnabled(false);
            btnCsOpenCsv.setEnabled(false);
            btnCsOpenPhotos.setEnabled(false);
            btnCsOpenSavePath.setEnabled(false);
        }
    }

    private void batchSetCTButtonsEnable(boolean enable) {
        if(enable) {
            btnCtOpenCsv.setEnabled(true);
            btnCtOpenCollectionCsv.setEnabled(true);
            btnCtGenerateTax.setEnabled(true);
            btnCtOpenSavePath.setEnabled(true);
        } else {
            btnCtOpenCsv.setEnabled(false);
            btnCtOpenCollectionCsv.setEnabled(false);
            btnCtGenerateTax.setEnabled(false);
            btnCtOpenSavePath.setEnabled(false);
        }
    }
}
